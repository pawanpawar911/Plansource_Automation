{"name": "Login Page Logo Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: cannot parse capability: goog:chromeOptions\nfrom invalid argument: unrecognized chrome option: prefs\nStacktrace:\n\tGetHandleVerifier [0x0xc73783+63299]\n\tGetHandleVerifier [0x0xc737c4+63364]\n\t(No symbol) [0x0xaa1113]\n\t(No symbol) [0x0xac87dc]\n\t(No symbol) [0x0xaca0c0]\n\t(No symbol) [0x0xac524d]\n\t(No symbol) [0x0xb18c62]\n\t(No symbol) [0x0xb18746]\n\t(No symbol) [0x0xb19eaf]\n\t(No symbol) [0x0xb19c5a]\n\t(No symbol) [0x0xb0e376]\n\t(No symbol) [0x0xadd6e0]\n\t(No symbol) [0x0xade544]\n\tGetHandleVerifier [0x0xece073+2531379]\n\tGetHandleVerifier [0x0xec9372+2511666]\n\tGetHandleVerifier [0x0xc99efa+220858]\n\tGetHandleVerifier [0x0xc8a548+156936]\n\tGetHandleVerifier [0x0xc90c7d+183357]\n\tGetHandleVerifier [0x0xc7b6e8+95912]\n\tGetHandleVerifier [0x0xc7b890+96336]\n\tGetHandleVerifier [0x0xc6666a+9770]\n\tBaseThreadInitThunk [0x0x7608fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]", "trace": "@pytest.fixture(scope=\"session\")\n    def driver():\n        logger = LogGenerate.logger_file()\n        logger.info(\"Starting application for the test session\")\n    \n        options = Options()\n        prefs = {\n            \"download.default_directory\": location,\n            \"plugins.always_open_pdf_externally\": True,\n            \"credentials_enable_service\": False,\n            \"profile.password_manager_enabled\": False,\n            \"profile.password_manager_leak_detection\":False\n        }\n        options.add_experimental_option(\"prefs\", prefs)\n        options.add_argument('--no-sandbox')  # # Bypass OS security model\n        options.add_argument('disable-infobars')\n        options.add_argument(\"--disable-extensions\")\n        options.add_argument(\"--disable-notifications\")\n        options.add_argument(\"--start-fullscreen\")\n        options.add_argument('--disable-gpu')\n        options.add_experimental_option(\"debuggerAddress\", \"127.0.0.1:9222\")\n    \n>       driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n\ntest_pages\\conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002810E09CBF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: cannot parse capability: g...tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: cannot parse capability: goog:chromeOptions\nE       from invalid argument: unrecognized chrome option: prefs\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xc73783+63299]\nE       \tGetHandleVerifier [0x0xc737c4+63364]\nE       \t(No symbol) [0x0xaa1113]\nE       \t(No symbol) [0x0xac87dc]\nE       \t(No symbol) [0x0xaca0c0]\nE       \t(No symbol) [0x0xac524d]\nE       \t(No symbol) [0x0xb18c62]\nE       \t(No symbol) [0x0xb18746]\nE       \t(No symbol) [0x0xb19eaf]\nE       \t(No symbol) [0x0xb19c5a]\nE       \t(No symbol) [0x0xb0e376]\nE       \t(No symbol) [0x0xadd6e0]\nE       \t(No symbol) [0x0xade544]\nE       \tGetHandleVerifier [0x0xece073+2531379]\nE       \tGetHandleVerifier [0x0xec9372+2511666]\nE       \tGetHandleVerifier [0x0xc99efa+220858]\nE       \tGetHandleVerifier [0x0xc8a548+156936]\nE       \tGetHandleVerifier [0x0xc90c7d+183357]\nE       \tGetHandleVerifier [0x0xc7b6e8+95912]\nE       \tGetHandleVerifier [0x0xc7b890+96336]\nE       \tGetHandleVerifier [0x0xc6666a+9770]\nE       \tBaseThreadInitThunk [0x0x7608fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\n\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "description": "This is test of login page logo", "start": 1750163704824, "stop": 1750163704824, "uuid": "4e1c33dd-943d-4dd7-8e69-45744eff7ace", "historyId": "b68036325b9bdc2b5496061e4db0dfa5", "testCaseId": "b68036325b9bdc2b5496061e4db0dfa5", "fullName": "test_pages.test_login_page#test_home_page", "labels": [{"name": "parentSuite", "value": "test_pages"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "5CD1343CDG"}, {"name": "thread", "value": "33864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pages.test_login_page"}]}