{"name": "Benefits and Family Page Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/admin/subscriber/use_as_subscriber_initial\">...</a> is not clickable at point (698, 897). Other element would receive the click: <h1>...</h1>\n  (Session info: chrome=137.0.7151.105)\nStacktrace:\n\tGetHandleVerifier [0x0xe83b03+62899]\n\tGetHandleVerifier [0x0xe83b44+62964]\n\t(No symbol) [0x0xcb10f3]\n\t(No symbol) [0x0xcffb30]\n\t(No symbol) [0x0xcfdeea]\n\t(No symbol) [0x0xcfba67]\n\t(No symbol) [0x0xcfad37]\n\t(No symbol) [0x0xcef3e5]\n\t(No symbol) [0x0xd1e50c]\n\t(No symbol) [0x0xceee74]\n\t(No symbol) [0x0xd1e784]\n\t(No symbol) [0x0xd3fd81]\n\t(No symbol) [0x0xd1e306]\n\t(No symbol) [0x0xced670]\n\t(No symbol) [0x0xcee4e4]\n\tGetHandleVerifier [0x0x10e4793+2556483]\n\tGetHandleVerifier [0x0x10dfd02+2537394]\n\tGetHandleVerifier [0x0xeaa2fa+220586]\n\tGetHandleVerifier [0x0xe9aae8+157080]\n\tGetHandleVerifier [0x0xea141d+184013]\n\tGetHandleVerifier [0x0xe8ba68+95512]\n\tGetHandleVerifier [0x0xe8bc10+95936]\n\tGetHandleVerifier [0x0xe76b5a+9738]\n\tBaseThreadInitThunk [0x0x7627fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bb82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77bb827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e97b8f0d6d28d33a3fcf3783df72f853\")>\n\n    @allure.title(\"Benefits and Family Page Test\")\n    @allure.description(\"This is test of benefits and family page\")\n    def test_benefits_and_family(driver: WebDriver):\n        logger = LogGenerate.logger_file()\n        logger.info(f\"Starting Test: {inspect.currentframe().f_code.co_name}\")\n    \n        try:\n            ssn = random.randint(100_000_000, 999_999_999)\n            employee_page = EmployeePage(driver)\n    \n>           employee_page.add_new_hire_enrollment()\n\ntest_pages\\test_login_page.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase_pages\\employees_page.py:102: in add_new_hire_enrollment\n    wait.until(EC.element_to_be_clickable(self.locators.new_hire_enrollment)).click()\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000202B6B08C20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x77bb82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77bb827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/admin/subscriber/use_as_subscriber_initial\">...</a> is not clickable at point (698, 897). Other element would receive the click: <h1>...</h1>\nE         (Session info: chrome=137.0.7151.105)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xe83b03+62899]\nE       \tGetHandleVerifier [0x0xe83b44+62964]\nE       \t(No symbol) [0x0xcb10f3]\nE       \t(No symbol) [0x0xcffb30]\nE       \t(No symbol) [0x0xcfdeea]\nE       \t(No symbol) [0x0xcfba67]\nE       \t(No symbol) [0x0xcfad37]\nE       \t(No symbol) [0x0xcef3e5]\nE       \t(No symbol) [0x0xd1e50c]\nE       \t(No symbol) [0x0xceee74]\nE       \t(No symbol) [0x0xd1e784]\nE       \t(No symbol) [0x0xd3fd81]\nE       \t(No symbol) [0x0xd1e306]\nE       \t(No symbol) [0x0xced670]\nE       \t(No symbol) [0x0xcee4e4]\nE       \tGetHandleVerifier [0x0x10e4793+2556483]\nE       \tGetHandleVerifier [0x0x10dfd02+2537394]\nE       \tGetHandleVerifier [0x0xeaa2fa+220586]\nE       \tGetHandleVerifier [0x0xe9aae8+157080]\nE       \tGetHandleVerifier [0x0xea141d+184013]\nE       \tGetHandleVerifier [0x0xe8ba68+95512]\nE       \tGetHandleVerifier [0x0xe8bc10+95936]\nE       \tGetHandleVerifier [0x0xe76b5a+9738]\nE       \tBaseThreadInitThunk [0x0x7627fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bb82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77bb827e+238]\n\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "This is test of benefits and family page", "start": 1750237241897, "stop": 1750237245758, "uuid": "87c5f6f0-cbac-4793-8018-79d83947317c", "historyId": "d0a7080398b1930c8005ab80f3ce1d96", "testCaseId": "d0a7080398b1930c8005ab80f3ce1d96", "fullName": "test_pages.test_login_page#test_benefits_and_family", "labels": [{"name": "parentSuite", "value": "test_pages"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "5CD1343CDG"}, {"name": "thread", "value": "37380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pages.test_login_page"}]}