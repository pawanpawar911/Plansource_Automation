{"name": "Add Dental Plan API Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0xf73b03+62899]\n\tGetHandleVerifier [0x0xf73b44+62964]\n\t(No symbol) [0x0xda0f50]\n\t(No symbol) [0x0xddc938]\n\t(No symbol) [0x0xe0e3c6]\n\t(No symbol) [0x0xe09e72]\n\t(No symbol) [0x0xe09406]\n\t(No symbol) [0x0xd73a05]\n\t(No symbol) [0x0xd73f5e]\n\t(No symbol) [0x0xd743fd]\n\tGetHandleVerifier [0x0x11d4793+2556483]\n\tGetHandleVerifier [0x0x11cfd02+2537394]\n\tGetHandleVerifier [0x0xf9a2fa+220586]\n\tGetHandleVerifier [0x0xf8aae8+157080]\n\tGetHandleVerifier [0x0xf9141d+184013]\n\t(No symbol) [0x0xd736d0]\n\t(No symbol) [0x0xd72f47]\n\tGetHandleVerifier [0x0x130aa2c+3826908]\n\tBaseThreadInitThunk [0x0x7753fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77e082ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77e0827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"833d75778c675fd4bfd897f081cd2d64\")>\n\n    @allure.title(\"Add Dental Plan API Test\")\n    @allure.description(\"This is test of add dental plan using put requests api\")\n    def test_add_dental_plan(driver: WebDriver):\n        logger = LogGenerate.logger_file()\n        logger.info(f\"Starting Test: {inspect.currentframe().f_code.co_name}\")\n    \n        employee_page = EmployeePage(driver)\n    \n        apiurl = ReadConfig.get_api_url()\n        referer = ReadConfig.get_referer()\n    \n>       session_id_value = driver.get_cookie(\"_session_id\")[\"value\"]\n\ntest_pages\\test_login_page.py:391: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:729: in get_cookie\n    return self.execute(Command.GET_COOKIE, {\"name\": name})[\"value\"]\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023D1681E570>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x77e082ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77e0827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xf73b03+62899]\nE       \tGetHandleVerifier [0x0xf73b44+62964]\nE       \t(No symbol) [0x0xda0f50]\nE       \t(No symbol) [0x0xddc938]\nE       \t(No symbol) [0x0xe0e3c6]\nE       \t(No symbol) [0x0xe09e72]\nE       \t(No symbol) [0x0xe09406]\nE       \t(No symbol) [0x0xd73a05]\nE       \t(No symbol) [0x0xd73f5e]\nE       \t(No symbol) [0x0xd743fd]\nE       \tGetHandleVerifier [0x0x11d4793+2556483]\nE       \tGetHandleVerifier [0x0x11cfd02+2537394]\nE       \tGetHandleVerifier [0x0xf9a2fa+220586]\nE       \tGetHandleVerifier [0x0xf8aae8+157080]\nE       \tGetHandleVerifier [0x0xf9141d+184013]\nE       \t(No symbol) [0x0xd736d0]\nE       \t(No symbol) [0x0xd72f47]\nE       \tGetHandleVerifier [0x0x130aa2c+3826908]\nE       \tBaseThreadInitThunk [0x0x7753fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77e082ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77e0827e+238]\n\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "This is test of add dental plan using put requests api", "start": 1750443995295, "stop": 1750443995298, "uuid": "4af7d37e-fe8a-45a8-acef-4e93467e7bb6", "historyId": "32a504a811ef2e1d9aba1ca2cf969faf", "testCaseId": "32a504a811ef2e1d9aba1ca2cf969faf", "fullName": "test_pages.test_login_page#test_add_dental_plan", "labels": [{"name": "parentSuite", "value": "test_pages"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "5CD1343CDG"}, {"name": "thread", "value": "43188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pages.test_login_page"}]}