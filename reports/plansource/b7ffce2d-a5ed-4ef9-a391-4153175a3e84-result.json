{"name": "Benefits and Family Page Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x4b3783+63299]\n\tGetHandleVerifier [0x0x4b37c4+63364]\n\t(No symbol) [0x0x2e0f70]\n\t(No symbol) [0x0x31c9a8]\n\t(No symbol) [0x0x34e436]\n\t(No symbol) [0x0x349f05]\n\t(No symbol) [0x0x349486]\n\t(No symbol) [0x0x2b3a05]\n\t(No symbol) [0x0x2b3f5e]\n\t(No symbol) [0x0x2b43ed]\n\tGetHandleVerifier [0x0x70e073+2531379]\n\tGetHandleVerifier [0x0x709372+2511666]\n\tGetHandleVerifier [0x0x4d9efa+220858]\n\tGetHandleVerifier [0x0x4ca548+156936]\n\tGetHandleVerifier [0x0x4d0c7d+183357]\n\t(No symbol) [0x0x2b36d0]\n\t(No symbol) [0x0x2b2edd]\n\tGetHandleVerifier [0x0x847f1c+3817180]\n\tBaseThreadInitThunk [0x0x7608fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"166005b3544e7ae8d340a04c54512391\")>\n\n    @allure.title(\"Benefits and Family Page Test\")\n    @allure.description(\"This is test of benefits and family page\")\n    def test_benefits_and_family(driver):\n        logger = LogGenerate.logger_file()\n        logger.info(f\"Starting Test: {inspect.currentframe().f_code.co_name}\")\n    \n        try:\n            ssn = random.randint(100_000_000, 999_999_999)\n            employee_page = EmployeePage(driver)\n    \n>           employee_page.add_new_hire_enrollment()\n\ntest_pages\\test_login_page.py:267: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\employees_page.py:100: in add_new_hire_enrollment\n    wait.until(EC.element_to_be_clickable(self.locators.new_hire_enrollment)).click()\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029E012436B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x4b3783+63299]\nE       \tGetHandleVerifier [0x0x4b37c4+63364]\nE       \t(No symbol) [0x0x2e0f70]\nE       \t(No symbol) [0x0x31c9a8]\nE       \t(No symbol) [0x0x34e436]\nE       \t(No symbol) [0x0x349f05]\nE       \t(No symbol) [0x0x349486]\nE       \t(No symbol) [0x0x2b3a05]\nE       \t(No symbol) [0x0x2b3f5e]\nE       \t(No symbol) [0x0x2b43ed]\nE       \tGetHandleVerifier [0x0x70e073+2531379]\nE       \tGetHandleVerifier [0x0x709372+2511666]\nE       \tGetHandleVerifier [0x0x4d9efa+220858]\nE       \tGetHandleVerifier [0x0x4ca548+156936]\nE       \tGetHandleVerifier [0x0x4d0c7d+183357]\nE       \t(No symbol) [0x0x2b36d0]\nE       \t(No symbol) [0x0x2b2edd]\nE       \tGetHandleVerifier [0x0x847f1c+3817180]\nE       \tBaseThreadInitThunk [0x0x7608fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\n\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"166005b3544e7ae8d340a04c54512391\")>\n\n    @allure.title(\"Benefits and Family Page Test\")\n    @allure.description(\"This is test of benefits and family page\")\n    def test_benefits_and_family(driver):\n        logger = LogGenerate.logger_file()\n        logger.info(f\"Starting Test: {inspect.currentframe().f_code.co_name}\")\n    \n        try:\n            ssn = random.randint(100_000_000, 999_999_999)\n            employee_page = EmployeePage(driver)\n    \n            employee_page.add_new_hire_enrollment()\n            logger.info(f\"Clicked on New hire enrollment button\")\n    \n            employee_page.get_started_button()\n            logger.info(f\"Clicked on Get started button\")\n    \n            employee_page.submit_button()\n            logger.info(f\"Clicked on submit button\")\n    \n            employee_page.add_new_family_member()\n            logger.info(f\"Clicked on New Family member button\")\n    \n            employee_page.add_firstname(user_data[\"sp_first_name\"])\n            logger.info(f\"First name entered: {user_data[\"sp_first_name\"]}\")\n    \n            employee_page.add_middlename(user_data[\"sp_middle_name\"])\n            logger.info(f\"Middle name entered: {user_data[\"sp_middle_name\"]}\")\n    \n            employee_page.add_lastname(user_data[\"sp_last_name\"])\n            logger.info(f\"Last name entered: {user_data[\"sp_last_name\"]}\")\n    \n            employee_page.ssn_id_1(ssn)\n            logger.info(f\"SSN ID entered: {ssn}\")\n    \n            employee_page.add_birthdate(user_data[\"birthdate\"])\n            logger.info(f\"Birthdate entered: {user_data[\"birthdate\"]}\")\n    \n            employee_page.add_gender(user_data[\"gender_female\"])\n            logger.info(f\"Gender entered: {user_data[\"gender_female\"]}\")\n    \n            employee_page.add_relationship(user_data[\"relationship\"])\n            logger.info(f\"Relationship entered: {user_data[\"relationship\"]}\")\n    \n            employee_page.submit_button()\n            logger.info(f\"Clicked on Next: Review My Family button\")\n    \n            try:\n                employee_page.submit_button()\n                logger.info(f\"Clicked on Next: Shop for benefits button\")\n    \n            except StaleElementReferenceException:\n                employee_page.submit_button()\n                logger.info(f\"Clicked on Next: Shop for benefits button\")\n    \n            expected_titles = [\n                \"Add Employee\",\n                \"New Dependent - Testing Plansource Client Benefits\",\n                'My Benefits - Testing Plansource Client Benefits',\n                \"Dashboard\"\n            ]\n    \n            assert driver.title in expected_titles, f\"Expected one of {expected_titles}, but got '{driver.title}'\"\n            logger.info(f\"Test Assertion: {driver.title}\")\n    \n        except AssertionError as e:\n            employee_page.save_screenshot(\"benefits_failure\")\n            logger.info(f\"Assertion failed: {e}\")\n    \n        except AttributeError as e:\n            employee_page.save_screenshot(\"benefits_failure\")\n            logger.info(f\"AttributeError failed: {e}\")\n    \n        except Exception as e:\n>           employee_page.save_screenshot(\"benefits_failure\")\n\ntest_pages\\test_login_page.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\base_page.py:43: in save_screenshot\n    result = self.driver.save_screenshot(path)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029E012436B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x4b3783+63299]\nE       \tGetHandleVerifier [0x0x4b37c4+63364]\nE       \t(No symbol) [0x0x2e0f70]\nE       \t(No symbol) [0x0x31c9a8]\nE       \t(No symbol) [0x0x34e436]\nE       \t(No symbol) [0x0x349f05]\nE       \t(No symbol) [0x0x349486]\nE       \t(No symbol) [0x0x2b3a05]\nE       \t(No symbol) [0x0x2b3f5e]\nE       \t(No symbol) [0x0x2b43ed]\nE       \tGetHandleVerifier [0x0x70e073+2531379]\nE       \tGetHandleVerifier [0x0x709372+2511666]\nE       \tGetHandleVerifier [0x0x4d9efa+220858]\nE       \tGetHandleVerifier [0x0x4ca548+156936]\nE       \tGetHandleVerifier [0x0x4d0c7d+183357]\nE       \t(No symbol) [0x0x2b36d0]\nE       \t(No symbol) [0x0x2b2edd]\nE       \tGetHandleVerifier [0x0x847f1c+3817180]\nE       \tBaseThreadInitThunk [0x0x7608fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c882ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77c8827e+238]\n\nC:\\Users\\Pawan.Pawar\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "This is test of benefits and family page", "start": 1750153986295, "stop": 1750153986299, "uuid": "10ff5092-95bd-446d-99ac-505e4d66c682", "historyId": "d0a7080398b1930c8005ab80f3ce1d96", "testCaseId": "d0a7080398b1930c8005ab80f3ce1d96", "fullName": "test_pages.test_login_page#test_benefits_and_family", "labels": [{"name": "parentSuite", "value": "test_pages"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "5CD1343CDG"}, {"name": "thread", "value": "32576-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pages.test_login_page"}]}